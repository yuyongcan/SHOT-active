import argparse
def get_source_args():
    parser = argparse.ArgumentParser(description='SHOT_source')
    parser.add_argument('--gpu_id', type=str, nargs='?', default='0', help="device id to run")
    parser.add_argument('--s', type=int, default=3, help="source")
    parser.add_argument('--t', type=int, default=1, help="target")
    parser.add_argument('--max_epoch', type=int, default=50, help="max iterations")
    parser.add_argument('--batch_size', type=int, default=64, help="batch_size")
    parser.add_argument('--worker', type=int, default=4, help="number of workers")
    parser.add_argument('--dset', type=str, default='office-home',
                        choices=['VISDA-C', 'office', 'office-home', 'office-caltech'])
    parser.add_argument('--lr', type=float, default=1e-2, help="learning rate")
    parser.add_argument('--net', type=str, default='resnet50', help="vgg16, resnet50, resnet101")
    parser.add_argument('--seed', type=int, default=2020, help="random seed")
    parser.add_argument('--bottleneck', type=int, default=256)
    parser.add_argument('--epsilon', type=float, default=1e-5)
    parser.add_argument('--layer', type=str, default="wn", choices=["linear", "wn"])
    parser.add_argument('--classifier', type=str, default="bn", choices=["ori", "bn"])
    parser.add_argument('--smooth', type=float, default=0.1)
    parser.add_argument('--output', type=str, default='san')
    parser.add_argument('--da', type=str, default='uda', choices=['uda', 'pda', 'oda'])
    parser.add_argument('--trte', type=str, default='val', choices=['full', 'val'])
    args = parser.parse_args()
    return args

def get_target_args():
    parser = argparse.ArgumentParser(description='SHOT_active')
    parser.add_argument('--gpu_id', type=str, nargs='?', default='3', help="device id to run")
    parser.add_argument('--s', type=int, default=0, help="source")
    parser.add_argument('--t', type=int, default=None, help="target")
    parser.add_argument('--max_epoch', type=float, default=15, help="max iterations")
    parser.add_argument('--interval', type=int, default=15)
    parser.add_argument('--batch_size', type=int, default=32, help="batch_size")
    parser.add_argument('--worker', type=int, default=4, help="number of workers")
    parser.add_argument('--dset', type=str, default='office-home',
                        choices=['VISDA-C', 'office', 'office-home', 'DomainNet'])
    parser.add_argument('--lr', type=float, default=1e-2, help="learning rate")
    parser.add_argument('--net', type=str, default='resnet50', help="alexnet, vgg16, resnet50, res101")
    parser.add_argument('--seed', type=int, default=2020, help="random seed")

    parser.add_argument('--gent', type=bool, default=True)
    parser.add_argument('--ent_par', type=int, default=1.)
    parser.add_argument('--threshold', type=int, default=0)
    parser.add_argument('--cls_par', type=float, default=0)
    parser.add_argument('--mix_ratio', type=float, default=1.0)
    parser.add_argument('--th_ratio', type=float, default=1.0)
    parser.add_argument('--w_th_ratio', type=float, default=1.0)
    parser.add_argument('--lr_decay1', type=float, default=0.1)
    parser.add_argument('--lr_decay2', type=float, default=1.0)

    parser.add_argument('--bottleneck', type=int, default=256)
    parser.add_argument('--epsilon', type=float, default=1e-5)
    parser.add_argument('--layer', type=str, default="wn", choices=["linear", "wn"])
    parser.add_argument('--classifier', type=str, default="bn", choices=["ori", "bn"])
    parser.add_argument('--distance', type=str, default='cosine', choices=["euclidean", "cosine"])
    parser.add_argument('--output', type=str, default='tar')
    parser.add_argument('--output_src', type=str, default='san')
    parser.add_argument('--da', type=str, default='uda', choices=['uda', 'pda'])
    parser.add_argument('--issave', type=bool, default=True)

    parser.add_argument('--disc',type=str,default='r1')
    parser.add_argument('--runs', type=int, default=1)
    parser.add_argument('--query', type=str, default="mg",choices=["clue","rand","ent","km","max","sam","mg",'cet'])
    parser.add_argument('--budgets', type=float, default=0.05)
    parser.add_argument('--tau', type=float, default=0.9)
    parser.add_argument('--T', type=float, default=1)
    parser.add_argument('--per_run_epoch', type=int, default=15)
    parser.add_argument('--src_par', type=float, default=1)
    parser.add_argument('--smooth', type=float, default=0.1)
    parser.add_argument('--alpha', type=float, default=0.75)
    parser.add_argument('--resume', action='store_true')
    parser.add_argument('--easynum', type=int, default=10)
    parser.add_argument('--skip_split', action='store_true')
    parser.add_argument("--lambda_u", default=100, type=float)
    parser.add_argument('--mode', type=int, default=0)
    parser.add_argument('--test1', type=int, default=1)
    parser.add_argument('--test2', action='store_true')
    parser.add_argument('--test3', action='store_true')
    parser.add_argument('--test4', action='store_true')
    parser.add_argument('--refine', action='store_true')
    parser.add_argument('--xi', type=float, default=1)
    parser.add_argument('--pro', type=float, default=0.05)

    args = parser.parse_args()
    args.per_run_epoch=args.max_epoch//args.runs

    return args